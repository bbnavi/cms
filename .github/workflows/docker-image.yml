name: Docker Image CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  prep:
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v2
    - uses: docker/setup-buildx-action@v1
    - uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - id: docker_build
      uses: docker/build-push-action@v2
      with:
        build-args: |
          NUXT_PUBLIC_AUTH_SECRET=${{ secrets.NUXT_PUBLIC_AUTH_SECRET }}
          NUXT_PUBLIC_AUTH_ORIGIN=${{ secrets.NUXT_PUBLIC_AUTH_ORIGIN }}
          NUXT_PUBLIC_AUTH_ENDPOINT=${{ secrets.NUXT_PUBLIC_AUTH_ENDPOINT }}
          NUXT_PUBLIC_USER_ENDPOINT=${{ secrets.NUXT_PUBLIC_USER_ENDPOINT }}
          NUXT_PUBLIC_GRAPHQL_ENDPOINT=${{ secrets.NUXT_PUBLIC_GRAPHQL_ENDPOINT }}
          NUXT_PUBLIC_GRAPHQL_AUTH_ENDPOINT=${{ secrets.NUXT_PUBLIC_GRAPHQL_AUTH_ENDPOINT }}
        cache-from: |
          type=registry,ref=ghcr.io/bbnavi/cms:staging
        push: true
        tags: ghcr.io/bbnavi/cms:staging
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    needs:
      - prep
    container: r.planetary-quantum.com/quantum-public/cli:2
    env:
      NUXT_PUBLIC_AUTH_SECRET: ${{ secrets.NUXT_PUBLIC_AUTH_SECRET }}
      NUXT_PUBLIC_AUTH_ORIGIN: ${{ secrets.NUXT_PUBLIC_AUTH_ORIGIN }}
      NUXT_PUBLIC_AUTH_ENDPOINT: ${{ secrets.NUXT_PUBLIC_AUTH_ENDPOINT }}
      NUXT_PUBLIC_USER_ENDPOINT: ${{ secrets.NUXT_PUBLIC_USER_ENDPOINT }}
      NUXT_PUBLIC_GRAPHQL_ENDPOINT: ${{ secrets.NUXT_PUBLIC_GRAPHQL_ENDPOINT }}
      NUXT_PUBLIC_GRAPHQL_AUTH_ENDPOINT: ${{ secrets.NUXT_PUBLIC_GRAPHQL_AUTH_ENDPOINT }}
      QUANTUM_USER: ${{ secrets.QUANTUM_USER }}
      QUANTUM_PASSWORD: ${{ secrets.QUANTUM_PASSWORD }}
      QUANTUM_ENDPOINT: "tpwd-bb-navi"
      QUANTUM_STACK: "bbnavi-datahub-cms-nuxt-staging"
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Planetary Quantum
        run: quantum-cli stacks update --create --wait
